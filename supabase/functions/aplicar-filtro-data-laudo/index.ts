import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Fun√ß√£o para calcular data limite do laudo
function calcularDataLimiteLaudo(periodoReferencia: string) {
  console.log(`üóìÔ∏è Calculando data limite para per√≠odo: ${periodoReferencia}`);
  
  const [mesStr, anoStr] = periodoReferencia.toLowerCase().split('/');
  
  const meses = {
    'janeiro': 1, 'jan': 1,
    'fevereiro': 2, 'fev': 2,
    'mar√ßo': 3, 'mar': 3,
    'abril': 4, 'abr': 4,
    'maio': 5, 'mai': 5,
    'junho': 6, 'jun': 6,
    'julho': 7, 'jul': 7,
    'agosto': 8, 'ago': 8,
    'setembro': 9, 'set': 9,
    'outubro': 10, 'out': 10,
    'novembro': 11, 'nov': 11,
    'dezembro': 12, 'dez': 12
  };
  
  const mes = meses[mesStr];
  const ano = anoStr.length === 2 ? 2000 + parseInt(anoStr) : parseInt(anoStr);
  
  if (!mes || !ano) {
    throw new Error(`Per√≠odo inv√°lido: ${periodoReferencia}`);
  }
  
  // Data limite: dia 7 do m√™s SEGUINTE ao per√≠odo
  // Para Jun/25: limite √© 07/07/2025 (laudos ap√≥s essa data devem ser exclu√≠dos)
  const dataLimiteLaudo = new Date(ano, mes, 7);
  
  const result = {
    dataLimiteLaudo: dataLimiteLaudo.toISOString().split('T')[0]
  };
  
  console.log(`üìä Data limite calculada: ${result.dataLimiteLaudo}`);
  console.log(`   - Excluir DATA_LAUDO > ${result.dataLimiteLaudo}`);
  
  return result;
}

export default async function handler(req: Request): Promise<Response> {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { periodo_referencia } = await req.json();
    
    if (!periodo_referencia) {
      throw new Error('per√≠odo_referencia √© obrigat√≥rio');
    }

    console.log(`üîß Aplicando filtro de DATA_LAUDO para per√≠odo: ${periodo_referencia}`);

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { dataLimiteLaudo } = calcularDataLimiteLaudo(periodo_referencia);
    
    console.log(`üìÖ Data limite para DATA_LAUDO: ${dataLimiteLaudo}`);

    let totalExcluidos = 0;
    const detalhes = [];

    // REGRA v002 N√ÉO SE APLICA MAIS AOS ARQUIVOS N√ÉO-RETROATIVOS
    // A regra de DATA_LAUDO deve ser aplicada SOMENTE nos arquivos retroativos
    console.log(`üìù Regra v002: Exclus√£o por DATA_LAUDO - aplica√ß√£o removida dos arquivos n√£o-retroativos`);
    console.log(`üìù A regra ser√° aplicada apenas em: volumetria_padrao_retroativo e volumetria_fora_padrao_retroativo`);
    
    // Sem exclus√µes nesta fun√ß√£o - transferidas para aplicar-exclusoes-periodo

    console.log(`üéØ Total de registros exclu√≠dos: ${totalExcluidos}`);

    return new Response(JSON.stringify({
      success: true,
      periodo_referencia,
      total_excluidos: totalExcluidos,
      detalhes,
      data_limite_aplicada: dataLimiteLaudo,
      arquivos_processados: []
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('üí• Erro ao aplicar filtro de DATA_LAUDO:', error);
    
    return new Response(JSON.stringify({
      success: false,
      error: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
}